// src/components/ChatInterface.jsx
import React, { useState, useEffect, useRef } from 'react';
import { Send, Upload, X, Loader2 } from 'lucide-react';
import ReactMarkdown from 'react-markdown';
import { Button } from './ui/Button';
import { Textarea } from './ui/Textarea';
import { mockApi } from '../utils/mockApi';
import { toast } from '../utils/toast';
import { Logo } from './Logo';
import { ProductionProgress } from './ProductionProgress';

export const ChatInterface = ({ chatId, onChatUpdate, onCreditsRefreshed, onNewChat, darkMode }) => {
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [selectedFile, setSelectedFile] = useState(null);
  const [user, setUser] = useState(null);
  const messagesEndRef = useRef(null);
  const fileInputRef = useRef(null);

  useEffect(() => {
    const loadUser = async () => {
      try {
        const currentUser = await mockApi.User.me();
        setUser(currentUser);
      } catch (error) {
        console.error('Error loading user:', error);
      }
    };
    loadUser();
  }, []);

  useEffect(() => {
    if (chatId) {
      loadMessages();
    } else {
      setMessages([]);
    }
  }, [chatId]);

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  const loadMessages = async () => {
    try {
      const chatMessages = await mockApi.Message.filter(chatId);
      setMessages(chatMessages);
    } catch (error) {
      console.error('Error loading messages:', error);
    }
  };

  const handleSendMessage = async (e) => {
    e.preventDefault();
    if (!input.trim() && !selectedFile) return;

    const userMessage = {
      message_type: 'user',
      content: input,
      created_at: new Date().toISOString()
    };

    setMessages(prev => [...prev, userMessage]);
    setIsLoading(true);
    const currentInput = input;
    setInput('');

    if (!chatId) {
      const newChat = await mockApi.Chat.create({
        title: currentInput.trim().length > 30 ? `${currentInput.trim().substring(0, 27)}...` : currentInput.trim() || 'New Video Project',
        workflow_state: 'draft',
        created_by: user?.email || 'demo@viduto.com'
      });
      onChatUpdate?.(newChat.id);
      return;
    }

    setTimeout(async () => {
      const aiResponse = {
        message_type: 'assistant',
        content: `I'll help you create a professional video for "${currentInput}". Here's what I'll include:

â€¢ 30-second duration with 5 dynamic scenes
â€¢ Professional voiceover and background music
â€¢ Optimized for social media (9:16 format)
â€¢ High-quality transitions and effects

Would you like me to start production? This will cost 10 credits.`,
        created_at: new Date().toISOString()
      };
      setMessages(prev => [...prev, aiResponse]);
      setIsLoading(false);
    }, 1500);
  };

  const handleStartProduction = () => {
    toast.success('Starting video production! This will take about 10 minutes.');
    const productionMessage = {
      message_type: 'assistant',
      content: 'Starting video production...',
      created_at: new Date().toISOString(),
      metadata: { production_started: true, started_at: Date.now() }
    };
    setMessages(prev => [...prev, productionMessage]);
  };

  const renderMessage = (message, index) => {
    const isUser = message.message_type === 'user';
    
    return (
      <div key={index} className={`flex ${isUser ? 'justify-end' : 'justify-start'} mb-4`}>
        <div className={`max-w-[85%] rounded-2xl p-4 shadow-sm ${
          isUser
            ? 'bg-orange-500 text-white'
            : darkMode ? 'bg-gray-700 border border-gray-600' : 'bg-white border border-gray-200'
        }`}>
          {message.metadata?.image_url && (
            <img
              src={message.metadata.image_url}
              alt="Uploaded"
              className="max-w-full h-auto rounded-lg mb-3"
            />
          )}

          <ReactMarkdown className={`prose prose-sm max-w-none [&>*:first-child]:mt-0 [&>*:last-child]:mb-0 ${
            darkMode && !isUser ? 'prose-invert' : ''
          }`}>
            {message.content}
          </ReactMarkdown>

          {message.metadata?.is_approval_section && (
            <div className="flex gap-2 mt-4">
              <Button
                onClick={handleStartProduction}
                disabled={isLoading || (user?.credits || 0) < 10}
                className="bg-orange-500 hover:bg-orange-600 text-white"
              >
                Start Production (10 credits)
              </Button>
            </div>
          )}

          {message.metadata?.production_started && (
            <div className="mt-4">
              <ProductionProgress
                videoId="new_video"
                startedAt={message.metadata.started_at}
                darkMode={darkMode}
                onCancel={() => toast.info('Production cancelled')}
              />
            </div>
          )}
        </div>
      </div>
    );
  };

  if (!chatId) {
    return (
      <div className={`flex flex-col h-full ${darkMode ? 'bg-gray-900' : 'bg-gray-50'}`}>
        <div className="flex-1 flex items-center justify-center">
          <div className="text-center max-w-md mx-auto px-6">
            <div className={`w-16 h-16 rounded-full mx-auto mb-4 flex items-center justify-center ${
              darkMode ? 'bg-orange-500/20' : 'bg-orange-100'
            }`}>
              <Logo size={32} />
            </div>
            <h3 className={`text-xl font-light mb-2 ${darkMode ? 'text-white' : 'text-gray-900'}`}>
              Start your first project
            </h3>
            <p className={`text-sm mb-6 ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>
              Upload your product image and describe the video you want to create
            </p>
          </div>
        </div>

        <div className={`border-t p-4 ${darkMode ? 'border-gray-700 bg-gray-800' : 'border-gray-200 bg-white'}`}>
          <form onSubmit={handleSendMessage} className="flex gap-3">
            <input
              ref={fileInputRef}
              type="file"
              accept="image/*"
              onChange={(e) => setSelectedFile(e.target.files[0])}
              className="hidden"
            />
            
            <Button
              type="button"
              variant="outline"
              size="icon"
              onClick={() => fileInputRef.current?.click()}
              className={darkMode ? 'border-gray-600 text-gray-300 hover:bg-gray-700' : ''}
            >
              <Upload className="w-4 h-4" />
            </Button>

            <div className="flex-1">
              <Textarea
                value={input}
                onChange={(e) => setInput(e.target.value)}
                placeholder="Describe your video idea... (e.g., 'Create a trendy product showcase for my sneakers')"
                className={`resize-none ${darkMode ? 'bg-gray-700 border-gray-600 text-white' : ''}`}
                rows={1}
              />
            </div>

            <Button
              type="submit"
              disabled={!input.trim() && !selectedFile}
              className="bg-orange-500 hover:bg-orange-600 text-white"
            >
              {isLoading ? <Loader2 className="w-4 h-4 animate-spin" /> : <Send className="w-4 h-4" />}
            </Button>
          </form>

          {selectedFile && (
            <div className="flex items-center gap-2 mt-3 p-3 rounded-lg bg-orange-50">
              <span className="text-sm flex-1 text-orange-800">
                ðŸ“· {selectedFile.name}
              </span>
              <Button
                type="button"
                variant="ghost"
                size="sm"
                onClick={() => {
                  setSelectedFile(null);
                  if (fileInputRef.current) {
                    fileInputRef.current.value = '';
                  }
                }}
                className="text-orange-600 hover:text-orange-700"
              >
                <X className="w-4 h-4" />
              </Button>
            </div>
          )}
        </div>
      </div>
    );
  }

  return (
    <div className={`flex flex-col h-full ${darkMode ? 'bg-gray-900' : 'bg-gray-50'}`}>
      <div className="flex-1 overflow-y-auto p-4 space-y-4">
        {messages.map((message, index) => renderMessage(message, index))}
        <div ref={messagesEndRef} />
      </div>

      <div className={`border-t p-4 ${darkMode ? 'border-gray-700 bg-gray-800' : 'border-gray-200 bg-white'}`}>
        <form onSubmit={handleSendMessage} className="flex gap-3">
          <input
            ref={fileInputRef}
            type="file"
            accept="image/*"
            onChange={(e) => setSelectedFile(e.target.files[0])}
            className="hidden"
          />
          
          <Button
            type="button"
            variant="outline"
            size="icon"
            onClick={() => fileInputRef.current?.click()}
            className={darkMode ? 'border-gray-600 text-gray-300 hover:bg-gray-700' : ''}
          >
            <Upload className="w-4 h-4" />
          </Button>

          <div className="flex-1">
            <Textarea
              value={input}
              onChange={(e) => setInput(e.target.value)}
              placeholder="Ask for changes or describe a new video..."
              className={`resize-none ${darkMode ? 'bg-gray-700 border-gray-600 text-white' : ''}`}
              rows={1}
            />
          </div>

          <Button
            type="submit"
            disabled={!input.trim() && !selectedFile}
            className="bg-orange-500 hover:bg-orange-600 text-white"
          >
            {isLoading ? <Loader2 className="w-4 h-4 animate-spin" /> : <Send className="w-4 h-4" />}
          </Button>
        </form>

        {selectedFile && (
          <div className="flex items-center gap-2 mt-3 p-3 rounded-lg bg-orange-50">
            <span className="text-sm flex-1 text-orange-800">
              ðŸ“· {selectedFile.name}
            </span>
            <Button
              type="button"
              variant="ghost"
              size="sm"
              onClick={() => {
                setSelectedFile(null);
                if (fileInputRef.current) {
                  fileInputRef.current.value = '';
                }
              }}
              className="text-orange-600 hover:text-orange-700"
            >
              <X className="w-4 h-4" />
            </Button>
          </div>
        )}
      </div>
    </div>
  );
};

// src/components/ProductionProgress.jsx
import React, { useState, useEffect } from 'react';
import { Loader2 } from 'lucide-react';
import { Button } from './ui/Button';

export const ProductionProgress = ({ videoId, startedAt, darkMode = false, onCancel, isCancelling = false }) => {
  const [elapsedSeconds, setElapsedSeconds] = useState(0);
  const [isOverTime, setIsOverTime] = useState(false);

  const isRevision = videoId && videoId.startsWith('revision_');
  const estimatedTotalTimeMinutes = isRevision ? 5 : 12;
  const estimatedTotalSeconds = estimatedTotalTimeMinutes * 60;

  useEffect(() => {
    const interval = setInterval(() => {
      const now = Date.now();
      const elapsed = Math.floor((now - startedAt) / 1000);
      setElapsedSeconds(elapsed);
      setIsOverTime(elapsed > estimatedTotalSeconds);
    }, 1000);

    return () => clearInterval(interval);
  }, [startedAt, estimatedTotalSeconds]);

  const progress = Math.min((elapsedSeconds / estimatedTotalSeconds) * 100, 100);
  const remainingSeconds = Math.max(estimatedTotalSeconds - elapsedSeconds, 0);
  const remainingMinutes = Math.floor(remainingSeconds / 60);
  const remainingSecondsDisplay = remainingSeconds % 60;

  return (
    <div className={`rounded-2xl p-6 border ${
      darkMode ? 'bg-gray-800 border-gray-700' : 'bg-